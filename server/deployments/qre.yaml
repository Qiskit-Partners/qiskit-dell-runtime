apiVersion: v1
kind: Namespace
metadata:
  name: ${QRE_NS}

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: qreorch
  namespace: ${QRE_NS}

---

apiVersion: v1
kind: Secret
metadata:
  namespace: ${QRE_NS}
  name: root-pw
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password

---

apiVersion: v1
kind: Secret
metadata:
  namespace: ${QRE_NS}
  name: user-pw
  annotations:
    secret-generator.v1.mittwald.de/autogenerate: password

---

apiVersion: v1
kind: Secret
metadata:
  namespace: ${QRE_NS}
  name: certs
type: Opaque
data:
  ionq_qpu.crt: IONQQPU
  ionq_simulator.crt: IONQSIMULATOR
  qrecerts.crt: QRECERTS
---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: ${QRE_NS}
  name: qreorch
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]

---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: qreorch_binding
  namespace: ${QRE_NS}
subjects:
- kind: ServiceAccount
  name: qreorch
  apiGroup: ""
roleRef:
  kind: Role
  name: qreorch
  apiGroup: ""

---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: ${QRE_NS}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 256Mi

---

apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: ${QRE_NS}
spec:
  ports:
  - port: 3306
  selector:
    app: mysql
  clusterIP: None

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: ${QRE_NS}
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
    #TODO: remove before open sourcing - specific fix for our setup.
      nodeName: k8s-w-3-oro-sandbox-small1
      containers:
      - image: ${DOCKER_REPO}/${MYSQL_IMAGE}
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: root-pw
              key: password
        - name: "MYSQL_DATABASE"
          value: "qre"
        - name: "MYSQL_USER"
          value: "qre"
        - name: "MYSQL_PASSWORD"
          valueFrom:
            secretKeyRef:
              name: user-pw
              key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc


# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: zoo1
#   namespace: ${QRE_NS}
#   labels:
#     app: zookeeper-1
# spec:
#   ports:
#     - name: client
#       port: 2181
#       protocol: TCP
#     - name: follower
#       port: 2888
#       protocol: TCP
#     - name: leader
#       port: 3888
#       protocol: TCP
#   selector:
#     app: zookeeper-1

# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: kafka-service
#   namespace: ${QRE_NS}
#   labels:
#     name: kafka
# spec:
#   ports:
#     - port: 9092
#       name: kafka-port
#       protocol: TCP
#   selector:
#     app: kafka
#     id: "0"

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: zookeeper-deployment-1
#   namespace: ${QRE_NS}
# spec:
#   selector:
#     matchLabels:
#       app: zookeeper-1
#   template:
#     metadata:
#       labels:
#         app: zookeeper-1
#     spec:
#       containers:
#         - name: zoo1
#           image: harbor.dell.com/dojo-harbor/qre/zookeeper
#           ports:
#             - containerPort: 2181
#           env:
#             - name: ZOOKEEPER_ID
#               value: "1"
#             - name: ZOOKEEPER_SERVER_1
#               value: zoo1

# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: kafka-broker0
#   namespace: ${QRE_NS}
# spec:
#   selector:
#     matchLabels:
#       app: kafka
#   template:
#     metadata:
#       labels:
#         app: kafka
#         id: "0"
#     spec:
#       containers:
#         - name: kafka
#           image: harbor.dell.com/dojo-harbor/qre/kafka
#           ports:
#             - containerPort: 9092
#           env:
#             - name: KAFKA_ADVERTISED_PORT
#               value: "9092"
#             - name: KAFKA_ADVERTISED_HOST_NAME
#               value: kafka-service
#             - name: KAFKA_ZOOKEEPER_CONNECT
#               value: zoo1:2181
#             - name: KAFKA_BROKER_ID
#               value: "0"
#             - name: KAFKA_CREATE_TOPICS
#               value: sample.topic:1:1


